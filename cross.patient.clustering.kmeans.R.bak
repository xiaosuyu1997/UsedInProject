#!/usr/bin/env Rscript

suppressPackageStartupMessages(library("argparse"))

parser <- ArgumentParser()
parser$add_argument("-d", "--designFile", type="character", required=TRUE, help="design matrix file")
parser$add_argument("-i", "--inputFile", type="character", required=TRUE, help="input file")
parser$add_argument("-f", "--geneFile", type="character", help="gene list file")
parser$add_argument("-c", "--cellTypeColorFile", default="/WPS1/zhenglt/work/TCR_chunhong/data/CellType.color", 
                    type="character", help="cellTypeColorFile [default %(default)s]")
parser$add_argument("-o", "--outDir", type="character", required=TRUE, help="output directory")
parser$add_argument("-s", "--sample", type="character", default="SAMPLE", help="sample id  [default %(default)s]")
parser$add_argument("-v", "--verbose", action="store_true", default=FALSE, help="whether verbose mode [default %(default)s]")
parser$add_argument("-l", "--log", action="store_true", default=FALSE, help="whether do log transform [default %(default)s]")
parser$add_argument("-r", "--center", action="store_true", default=FALSE, help="whether center genes by individual [default %(default)s]")
parser$add_argument("-m", "--notFilter", action="store_true", default=FALSE, help="don't filtering genes [default %(default)s]")
parser$add_argument("-n", "--nKeep", type="integer", default=1500, help="use top nKeep genes [default %(default)s]")
#### method specific
parser$add_argument("-y", "--transform", type="character", default="none", help="do transformation(none, pca, eigenmap) [default %(default)s]")
parser$add_argument("-k", "--kbatch", type="character", default="2,3,4,5,6,7,8,9,10", help="kbatch [default %(default)s]")
args <- parser$parse_args()

print(args)

designFile <- args$designFile
inputFile <- args$inputFile
geneFile <- args$geneFile
cellTypeColorFile <- args$cellTypeColorFile
clonotype.file <- args$clonotypeFile
out.dir <- args$outDir
sample.id <- args$sample
args.log <- args$log
args.center <- args$center
nKeep <- args$nKeep
#args.notSC3 <- args$notSC3
args.notFilter <- args$notFilter

args.transform <- args$transform
args.kbatch <- args$kbatch
if(!is.null(args.kbatch)) { args.kbatch <- as.numeric(unlist(strsplit(args.kbatch,","))) }

#clonotype.strict.data <- read.clonotype(in.file = clonotype.file,ctype.col = "C_strict")

##### frequently used code
dir.create(out.dir,recursive = T,showWarnings = F)
source("/Share/BP/zhenglt/02.pipeline/cancer/lib/scRNAToolKit.R")
g.inputD <- processInput(designFile,cellTypeColorFile,inputFile,args.notFilter,geneFile,args.center,args.log)
myDesign <- g.inputD$myDesign
sampleTypeColor <- g.inputD$sampleTypeColor
patient.col.list <- g.inputD$patient.col.list
Y <- g.inputD$Y
g.GNAME <- g.inputD$g.GNAME
##### 

#### select variable genes
Y.sd <- apply(Y, 1, sd)
Y.sd.sort <- sort(Y.sd,decreasing=TRUE)
Y.sd.df <- data.frame(geneID=names(Y.sd.sort),geneSymbol=g.GNAME[names(Y.sd.sort)])
Y.sd.df <- cbind(Y.sd.df,Y.sd.sort)
write.table(Y.sd.df,sprintf("%s/%s.Y.sd.sort.txt",out.dir,sample.id),row.names = F,sep = "\t",quote = F)

#### rename rownames
Y.newRowname <- Y
newName <- g.GNAME[rownames(Y)]
names(newName) <- rownames(Y)
f.gname.na <- is.na(newName)
newName[f.gname.na] <- names(newName)[f.gname.na]
rownames(Y.newRowname) <- unname(newName)

g.f <- head(names(Y.sd.sort),n=nKeep)
#doit.kmeans(Y,g.f,extra="",myseed=NULL,data.forDE=Y.newRowname)

### pca or other transformation
if(args.transform=="pca"){
    g.out.prefix <- sprintf("%s/%s.kmeans.pca",out.dir,sample.id)
    g.do.pca <- T
}else if(args.transform=="none"){
    g.out.prefix <- sprintf("%s/%s.kmeans.none",out.dir,sample.id)
    g.do.pca <- F
}
kmeans.out <- runKMeansAnalysis(Y[g.f,],g.out.prefix,myDesign$sampleType,colSet,B=100,nfeatures=NULL,
                  legend=c(names(sampleTypeColor)[names(sampleTypeColor) %in% unique(as.character(myDesign$sampleType))],
                           unique(myDesign$libType)),
                  col.legend=c(sampleTypeColor[names(sampleTypeColor) %in% unique(as.character(myDesign$sampleType))],
                               rep("black",length(unique(myDesign$libType)))),
                  col.points = sampleTypeColor[as.character(myDesign$sampleType)],
                  k.batch = args.kbatch,do.scale=T,do.pca = g.do.pca,data.forDE = Y.newRowname)
                  #k.batch = c(4,5,6),do.scale = T,data.forDE = Y.newRowname)
#### To do: refine


