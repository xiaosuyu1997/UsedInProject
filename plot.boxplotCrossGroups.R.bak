#!/usr/bin/env Rscript

suppressPackageStartupMessages(library("argparse"))

parser <- ArgumentParser()
parser$add_argument("-i", "--inFile", type="character", required=TRUE, help="infile")
parser$add_argument("-a", "--sampleDescFile", type="character", required=TRUE, help="sample.desc.file")
parser$add_argument("-b", "--geneFile", type="character", required=TRUE, help="gene list file (\"ALL\" for all genes pass the internal filter)")
parser$add_argument("-o", "--outputPrefix", type="character", required=TRUE, help="output prefix")
parser$add_argument("-q", "--plotType", type="character", default="violin", help="plot type, one of violin, boxplot, barplot  [default %(default)s]")
parser$add_argument("-s", "--sample", type="character", default="SAMPLE", help="sample id  [default %(default)s]")
#parser$add_argument("-y", "--cellTypeColorFile", type="character", default="/WPS1/zhenglt/work/TCR_chunhong/data/CellType.color", 
#                    help="cellTypeColorFile [default %(default)s]")
parser$add_argument("-w", "--clusterColorFile", type="character", 
                    help="clusterColorFile [default %(default)s]")
parser$add_argument("-f", "--clonotypeFile", type="character", help="clonotype file")
parser$add_argument("-t", "--rowSort", action="store_true", default=FALSE, help="row sort [default %(default)s]")
parser$add_argument("-l", "--log", action="store_true", default=FALSE, help="whether do log transform [default %(default)s]")
parser$add_argument("-r", "--center", action="store_true", default=FALSE, 
                    help="whether center genes by individual [default %(default)s]")
##parser$add_argument("-m", "--scoreMatrix", type="character", help="score matrix used for annotating samples")
parser$add_argument("-n", "--nMax", type="integer", help="max gene to plot")
parser$add_argument("-v", "--verbose", action="store_true", default=FALSE, help="verbose mode [default %(default)s]")
parser$add_argument("-p", "--perGene", action="store_true", default=FALSE, help="one figure per gene [default %(default)s]")
parser$add_argument("-e", "--expSort", action="store_true", default=FALSE, help="sort by exp in each gene [default %(default)s]")
####parser$add_argument("-z", "--binFile", type="character", help="binarized expression file")
parser$add_argument("-d", "--pdfWidth", type="double", default=8, help="pdf width [default %(default)s]")
args <- parser$parse_args()
print(args)


in.file <- args$inFile
sample.desc.file <- args$sampleDescFile
gene.file <- args$geneFile
out.prefix <- args$outputPrefix
sample.id <- args$sample
#cellTypeColorFile <- args$cellTypeColorFile
clusterColorFile <- args$clusterColorFile
clonotype.file <- args$clonotypeFile
args.rowSort <- args$rowSort
args.log <- args$log
args.center <- args$center
###scoreMatrix.file <- args$scoreMatrix
mode.verbose <- args$verbose
#args.rowSort <- FALSE
pdf.width <- args$pdfWidth
exp.sort <- args$expSort
nMax <- args$nMax
args.perGene <- args$perGene
args.plotType <- args$plotType
#bin.exp.file <- args$binFile

#in.file <- "/WPS1/zhenglt/work/proj_xy/integrated/cross.patient/exp/lung.P9.scran.RData"
#sample.desc.file <- "/WPS1/zhenglt/work/proj_xy/integrated/cross.patient/clusteringResult/lungC.all.leaf.addMajor.final.forPlot.txt"
#gene.file <- "ALL"
#out.prefix <- "/WPS1/zhenglt/work/proj_xy/integrated/cross.patient/violin/lungC"
#sample.id <- "lungC T Cells"
#cellTypeColorFile <- "/WPS1/zhenglt/work/TCR_chunhong/data/CellType.color"
#clusterColorFile <- "/WPS1/zhenglt/work/proj_xy/integrated/cross.patient/curated.clusterColor.txt"
#clonotype.file <- "/WPS1/zhenglt/work/proj_xy/integrated/tcr/TCRinfo.zyy.formatted.txt"
#args.rowSort <- F
#args.log <- F
#args.center <- F
#args.perGene <- T

source("/Share/BP/zhenglt/02.pipeline/cancer/lib/scRNAToolKit.R")

suppressPackageStartupMessages(require("ComplexHeatmap"))
suppressPackageStartupMessages(require("circlize"))
suppressPackageStartupMessages(require("gridBase"))
suppressPackageStartupMessages(require("dendextend"))
suppressPackageStartupMessages(require("RColorBrewer"))
suppressPackageStartupMessages(require("gplots"))
suppressPackageStartupMessages(library("vioplot"))
suppressPackageStartupMessages(library("plotrix"))
suppressPackageStartupMessages(library("vioplot"))
suppressPackageStartupMessages(library("ggplot2"))
suppressPackageStartupMessages(library("reshape2"))
suppressPackageStartupMessages(library("dplyr"))
suppressPackageStartupMessages(library("Rmisc"))

loginfo("begin ...")


#### sample data
sample.desc <- read.table(sample.desc.file,header = T,sep = "\t",check.names = F,stringsAsFactors = F)
rownames(sample.desc) <- sample.desc$sample
print(dim(sample.desc))
print(head(sample.desc))
print(str(sample.desc))
##q()

### clonotype data
clonotype.data <- read.clonotype(in.file = clonotype.file,ctype.col = "C_strict")
#### exp data

suppressPackageStartupMessages(library("R.utils"))
if(grepl("\\.scran\\.RData$",in.file,perl=T)){
    lenv <- loadToEnv(in.file)
    Y <- exprs(lenv[["sce.norm"]])
    args.log <- F
    args.center <- F
    g.GNAME <- fData(lenv[["sce.norm"]])[,"geneSymbol"]
    names(g.GNAME) <- rownames(Y)
}else if(grepl("RData$",in.file,perl=T)){
    suppressPackageStartupMessages(library("R.utils"))
    lenv <- loadToEnv(in.file)
    Y <- lenv[["Y"]]
    g.GNAME <- entrezToXXX(rownames(Y))
    names(g.GNAME) <- rownames(Y)
}else{
    in.table <- read.table(in.file,header = T,sep = "\t",stringsAsFactors = F,check.names = F)
    rownames(in.table) <- in.table[,1]
    Y <- in.table[,c(-1,-2)]
    g.GNAME <- entrezToXXX(rownames(Y))
    names(g.GNAME) <- rownames(Y)
}
g.GNAME.f <- which(is.na(g.GNAME))
g.GNAME[g.GNAME.f] <- names(g.GNAME)[g.GNAME.f]

Y <- Y[names(g.GNAME)[which(!duplicated(g.GNAME))],]

sname <- intersect(rownames(sample.desc),colnames(Y))
sample.desc <- sample.desc[sname,,drop=F]
Y <- Y[,sname,drop=F]

f <- apply(Y,1,function(x){ nE <- sum(x>0); return( nE > 5 & nE/length(x) > 0.01 )  })
Y <- Y[f,]
if(args.log) { Y <- log2(Y+1) }
if(args.center){
    Y.new <- c()
    for(pp in unique(sample.desc$patient)){
        Y.block <- t(scale(t(Y[,subset(sample.desc,patient==pp,select="sample",drop=T)]),center = T,scale = F))
        Y.new <- cbind(Y.new,Y.block)
        ##print(apply(Y.block[1:4,],1,mean))
        ##print(apply(Y.block[1:4,],1,sd))
    }
    Y <- Y.new
    Y <- Y[,sname,drop=F]
}
print(dim(Y))
print(Y[1:4,1:6])

if(mode.verbose){
    ##save(Y,g.GNAME,sample.desc,file=sprintf("%s.Y.RData",out.prefix))
}

#### gene data
if(gene.file=="ALL")
{
    ####g.f <- head(rownames(Y),n=20)
    g.f <- rownames(Y)
}else{
    gene.desc <- read.delim(gene.file,header = T,sep = "\t",check.names = F,stringsAsFactors = F)
                            ###colClasses = c("character","character","character"))
    gene.desc$geneID <- as.character(gene.desc$geneID)
    g.f <- intersect(gene.desc$geneID,rownames(Y))
}
Y.inGeneList <- Y[g.f,,drop=F]
### cell type color
#sampleTypeColor <- read.SampleTypeColor(cellTypeColorFile)
#sampleTypeColor <- sampleTypeColor[ names(sampleTypeColor) %in% unique(sample.desc[colnames(Y),"sampleType"]) ]

### major cluster color
nMajor <- length(unique(sample.desc$majorCluster))
if(!is.null(clusterColorFile) && file.exists(clusterColorFile)){
    majorClusterColor <- read.SampleTypeColor(clusterColorFile)
    majorClusterColor <- majorClusterColor[ names(majorClusterColor) %in% unique(sample.desc[colnames(Y),"majorCluster"]) ]
}else{
    majorClusterColor <- structure(colorRampPalette(brewer.pal(nMajor,"Paired"))(nMajor),
                              names=unique(sample.desc$majorCluster))
}
print(majorClusterColor)
### reorder samples by leaf cluster than hclust
#dat.plot <- c()
### row order
#if(args.rowSort){
#    loginfo("sort row by hclust")
#    dat.plot <- Y.inGeneList
#}else{
#    loginfo("sort row by Group then hclust")
#    for(g.cls in unique(gene.desc$Group))
#    {
#        g.desc <- subset(gene.desc,Group==g.cls)
#        dat.t <- Y.inGeneList[g.desc$geneID,,drop=F]
#        if(nrow(dat.t)>2){
#            tryCatch({
#                hc.t <- hclust(dist(dat.t),"complete")
#                dat.t <- dat.t[hc.t$order,,drop=F]
#            },error=function(e) e)
#        }
#        dat.plot <- rbind(dat.plot,dat.t)
#    }
#}
### column order
dat.plot <- Y.inGeneList
t.dat.plot <- dat.plot
dat.plot <- c()
for(s.cls in (unique(sample.desc$majorCluster)))
{
    s.desc <- subset(sample.desc,majorCluster==s.cls)
    ###dat.t <- Y.inGeneList[,rownames(s.desc),drop=F]
    dat.t <- t.dat.plot[,rownames(s.desc),drop=F]
    if(ncol(dat.t)>3 && nrow(dat.t)>3){
        tryCatch({
            hc.t <- hclust(dist(t(dat.t)), "complete")
            dat.t <- dat.t[,hc.t$order,drop=F]
            if(!is.null(clonotype.data)){
                ### clonotype
                clonotype.d.t <- clonotype.data$ctypeII[colnames(dat.t)]
                clonotype.d.t[is.na(clonotype.d.t)] <- "N0"
                names(clonotype.d.t) <- colnames(dat.t)
                ### sampleType
                sampleType.d.t <- factor(sample.desc[colnames(dat.t),"sampleType"],
                                         levels=c("PTC","NTC","TTC","PTH","NTH","TTH","PTR","NTR","TTR"))
                ### 
                ###dat.t <- dat.t[,names(sort(clonotype.d.t))]
                dat.t <- dat.t[,order(clonotype.d.t,sampleType.d.t)]
            }
        },error = function(e) e)
    }
    if(!is.null(dat.plot)) { dat.plot <- cbind(dat.plot,dat.t) 
    }else{ dat.plot <- dat.t }
}

#####
gid.list <- rownames(dat.plot)
gname.list <- g.GNAME[gid.list]
print(gid.list)
print(gname.list)
print(str(Y.inGeneList))

nIdx <- ncol(dat.plot)
uClus <- unique(sample.desc$majorCluster)
if(is.null(nMax)) 
{ 
    nUsed <- length(gid.list) 
}else{ 
    nUsed <- min(nMax,length(gid.list)) 
}
wTrack <- 1
nTrack <- 1

if(args.perGene){
    for(i in seq_along(gname.list)){
        gname <- gname.list[i]
        firstC <- unlist(strsplit(gname,""))[1]
        if(args.plotType=="violin"){
            dir.create(sprintf("%s.violin/%s",out.prefix,firstC),showWarnings = F,recursive = T)
            loginfo(sprintf("try to plot gene: %s",gname))
            pdf(sprintf("%s.violin/%s/violon.%s.%s.pdf",out.prefix,firstC,sample.id,gname),width=pdf.width,height=3)
            layout(mat = matrix(seq_len(3),ncol = 1,byrow = T),heights = c(1,1,1))
            par(mar=c(0,25,0,4),cex.lab=1.3)
            ### violin
            plot(0,0,type="n",xlim=c(0.5,length(uClus)+0.5), ylim=c(0,14), 
                 xaxt = 'n',yaxt="n", xlab ="",ylab="",main="",axes=0)
            par(bty="n")
            for(jj in seq_along(uClus))
            {
                s.desc <- subset(sample.desc,majorCluster==uClus[jj])
                d.vec <- unlist(dat.plot[gid.list[i],rownames(s.desc),drop=T])
                t.lo <- 0
                t.hi <- 14
                t.mean <- mean(d.vec)
                if(t.mean > t.hi) { 
                    t.mean <- t.hi
                }else if(t.mean < t.lo) { 
                    t.mean <- t.lo 
                }
                d.col <- rgb(colorRamp(c("yellow","red","black"))(t.mean/t.hi)/255)
                tryCatch(vioplot(d.vec,at=jj,add = T,drawRect=F,col=d.col,border=NA),
                         error = function(e) { loginfo(sprintf("vioplot() catch exception: gene %s",gname.list[i])); e })
            }
            staxlab(2,at = 7,labels = gname,srt=0,adj=1,cex=2.5)
            ### cluster label
            par(mar=c(5,25,0,4),cex.lab=1.3)
            plot(seq_along(uClus),rep(nTrack*wTrack+1.5,length(uClus)),
                 xlim=c(0.5,length(uClus)+0.5), ylim=c(0,nTrack*wTrack+1.5),xlab="",ylab="",xaxt="n",yaxt="n",axes=0,type="n")
            rect(seq_along(uClus)-0.5,rep(0*wTrack+0.5,length(uClus)),seq_along(uClus)+0.5,rep(1*wTrack+0.5,length(uClus)),
                 col=majorClusterColor[uClus],border=NA)
            staxlab(1,at=seq_along(uClus),labels=uClus,srt=30)
            ### legend
            par(mar=c(4,25,1,4),cex.lab=2.5,cex.axis=2.5,tck=-0.5)
            image(matrix(1:100),col=colorRampPalette(c("yellow","red","black"))(100), ylab="",yaxt="n",xaxt="n")
            axis(1,seq(0,1,1/7),labels = seq(0,14,14/7),padj=1.2)
            dev.off()
        }else if(args.plotType=="boxplot"){
            dir.create(sprintf("%s.boxplot/%s",out.prefix,firstC),showWarnings = F,recursive = T)
            loginfo(sprintf("try to plot gene: %s",gname))
            pdf(sprintf("%s.boxplot/%s/boxplot.%s.%s.pdf",out.prefix,firstC,sample.id,gname),width=pdf.width,height=3)
            dat.plot.df <- as.data.frame(t(dat.plot[gid.list[i],,drop=F]))
            colnames(dat.plot.df) <- g.GNAME[colnames(dat.plot.df)]
            dat.plot.df$majorCluster <- sample.desc[rownames(dat.plot.df),"majorCluster"]
            dat.plot.df <- melt(dat.plot.df)
            colnames(dat.plot.df) <- c("majorCluster","gene","Exp")
            p <- ggplot(dat.plot.df, aes(majorCluster, Exp)) + geom_boxplot(outlier.size = 0.8,varwidth=T) + 
                theme_bw(base_size = 12) + 
                facet_grid(gene ~ .,switch = "y",scales = "free_y") + 
                theme(axis.text.x = element_text(angle = 30, hjust = 1),strip.placement = "inside",plot.margin = unit(c(0.1,0.1,0.1,0.5), "cm")) 
                ##theme(axis.text.x = element_text(angle = 30, hjust = 1),strip.placement = "outside",strip.background = element_blank())
            print(p)
            dev.off()
        }else if(args.plotType=="barplot"){
            dir.create(sprintf("%s.barplot/%s",out.prefix,firstC),showWarnings = F,recursive = T)
            loginfo(sprintf("try to plot gene: %s",gname))
            pdf(sprintf("%s.barplot/%s/barplot.%s.%s.pdf",out.prefix,firstC,sample.id,gname),width=pdf.width,height=3)
            dat.plot.df <- as.data.frame(t(dat.plot[gid.list[i],,drop=F]))
            colnames(dat.plot.df) <- g.GNAME[colnames(dat.plot.df)]
            dat.plot.df$majorCluster <- sample.desc[rownames(dat.plot.df),"majorCluster"]
            dat.plot.df <- melt(dat.plot.df)
            colnames(dat.plot.df) <- c("majorCluster","gene","Exp")
            dat.plot.df <- summarySE(dat.plot.df, measurevar="Exp", groupvars=c("majorCluster","gene"))
            p <- ggplot(dat.plot.df, aes(majorCluster, Exp)) + 
                geom_bar(stat = "identity",color="black") +
                geom_errorbar(aes(ymax = Exp + sd, ymin = Exp),width=0.4) +
                theme_bw(base_size = 12) + 
                facet_grid(gene ~ .,switch = "y",scales = "fixed") +
                theme(axis.text.x = element_text(angle = 30, hjust = 1),strip.placement = "inside",plot.margin = unit(c(0.1,0.1,0.1,1), "cm"))
            print(p)
            dev.off()
        }
    }
}else{
    ##nMax=10
    loginfo(sprintf("nUsed: %d",nUsed))

    if(args.plotType=="violin"){
        pdf(sprintf("%s.violin.pdf",out.prefix),width=pdf.width,height=nUsed*1+2)
        ##layout(mat = matrix(seq_len(nUsed+2),ncol = 1,byrow = T),heights = c(1,rep(1,nUsed+1),8))
        layout(mat = matrix(seq_len(nUsed+2),ncol = 1,byrow = T),heights = c(rep(1,nUsed+1),1,8))
        #par(mar=c(5,16,0,4),cex.lab=1.5)
        #plot(seq_along(uClus),rep(nTrack*wTrack+1.5,length(uClus)),
        #     xlim=c(0.5,length(uClus)+0.5), ylim=c(0,nTrack*wTrack+1.5),xlab="",ylab="",xaxt="n",yaxt="n",axes=0,type="n")
        #rect(seq_along(uClus)-0.5,rep(0*wTrack+0.5,length(uClus)),seq_along(uClus)+0.5,rep(1*wTrack+0.5,length(uClus)),
        #     col=majorClusterColor[uClus],border=NA)
        ###text(seq_along(uClus)-0.5,rep(1*wTrack+0.5+0.2,length(uClus)),labels=uClus,adj=0,cex=1.0)
        #staxlab(1,at=seq_along(uClus),labels=uClus,srt=30)

        par(mar=c(0,25,0,4),cex.lab=1.3)
        for(i in seq_len(nUsed)){
            plot(0,0,type="n",xlim=c(0.5,length(uClus)+0.5), ylim=c(0,14), 
                 xaxt = 'n',yaxt="n", xlab ="",ylab="",main="",axes=0)
            par(bty="n")
            for(jj in seq_along(uClus))
            {
                s.desc <- subset(sample.desc,majorCluster==uClus[jj])
                d.vec <- unlist(dat.plot[gid.list[i],rownames(s.desc),drop=T])
                ###d.col <- rgb(colorRamp(brewer.pal(9,"YlOrRd"))(mean(d.vec)/14)/255)
                t.lo <- 0
                t.hi <- 14
                ###d.vec[d.vec < t.lo] <- t.lo
                ###d.vec[d.vec > t.hi] <- t.hi
                #cat(sprintf("gene: %s, mean: %4.4f, median: %4.4f\n",gname.list[i],mean(d.vec),median(d.vec)))
                t.mean <- mean(d.vec)
                if(t.mean > t.hi) { 
                    t.mean <- t.hi
                }else if(t.mean < t.lo) { 
                    t.mean <- t.lo 
                }
                d.col <- rgb(colorRamp(c("yellow","red","black"))(t.mean/t.hi)/255)
                tryCatch(vioplot(d.vec,at=jj,add = T,drawRect=F,col=d.col,border=NA),
                         error = function(e) { loginfo(sprintf("vioplot() catch exception: gene %s",gname.list[i])); e })
            }
            staxlab(2,at = 7,labels = gname.list[i],srt=0,adj=1,cex=2.5)
        }

        ###
        par(mar=c(5,25,0,4),cex.lab=1.3)
        plot(seq_along(uClus),rep(nTrack*wTrack+1.5,length(uClus)),
             xlim=c(0.5,length(uClus)+0.5), ylim=c(0,nTrack*wTrack+1.5),xlab="",ylab="",xaxt="n",yaxt="n",axes=0,type="n")
        rect(seq_along(uClus)-0.5,rep(0*wTrack+0.5,length(uClus)),seq_along(uClus)+0.5,rep(1*wTrack+0.5,length(uClus)),
             col=majorClusterColor[uClus],border=NA)
        ###text(seq_along(uClus)-0.5,rep(1*wTrack+0.5+0.2,length(uClus)),labels=uClus,adj=0,cex=1.0)
        staxlab(1,at=seq_along(uClus),labels=uClus,srt=30)

        ### legend
        par(mar=c(4,25,1,4),cex.lab=2.5,cex.axis=2.5,tck=-0.5)
        ##image(matrix(1:100),col=colorRampPalette(brewer.pal(9,"YlOrRd"))(100), ylab="",yaxt="n",xaxt="n")
        image(matrix(1:100),col=colorRampPalette(c("yellow","red","black"))(100), ylab="",yaxt="n",xaxt="n")
        axis(1,seq(0,1,1/7),labels = seq(0,14,14/7),padj=1.2)
        dev.off()
    }else if(args.plotType=="boxplot"){
        dat.plot.df <- as.data.frame(t(dat.plot))
        colnames(dat.plot.df) <- g.GNAME[colnames(dat.plot.df)]
        dat.plot.df$majorCluster <- sample.desc[rownames(dat.plot.df),"majorCluster"]
        dat.plot.df <- melt(dat.plot.df)
        colnames(dat.plot.df) <- c("majorCluster","gene","Exp")
        pdf(sprintf("%s.boxplot.pdf",out.prefix),width=pdf.width,height=nUsed*1+2)
        p <- ggplot(dat.plot.df, aes(majorCluster, Exp)) + geom_boxplot(outlier.size = 0.8,varwidth=T) + 
            theme_bw(base_size = 12) + 
            facet_grid(gene ~ .,switch = "y",scales = "free_y") +
            theme(axis.text.x = element_text(angle = 30, hjust = 1),strip.placement = "inside")
            ##theme(axis.text.x = element_text(angle = 30, hjust = 1),strip.placement = "outside",strip.background = element_blank())
        print(p)
        dev.off()
    }else if(args.plotType=="barplot"){
        dat.plot.df <- as.data.frame(t(dat.plot))
        colnames(dat.plot.df) <- g.GNAME[colnames(dat.plot.df)]
        dat.plot.df$majorCluster <- sample.desc[rownames(dat.plot.df),"majorCluster"]
        dat.plot.df <- melt(dat.plot.df)
        colnames(dat.plot.df) <- c("majorCluster","gene","Exp")
        dat.plot.df <- summarySE(dat.plot.df, measurevar="Exp", groupvars=c("majorCluster","gene"))
        ###dat.plot.mean.df <- aggregate(dat.plot.df,by=list(majorCluster=sample.desc[rownames(dat.plot.df),"majorCluster"]),mean)
        ###dat.plot.sd.df <- aggregate(dat.plot.df,by=list(majorCluster=sample.desc[rownames(dat.plot.df),"majorCluster"]),sd)
        ###dat.plot.mean.df <- melt(dat.plot.mean.df,id.vars="majorCluster")
        ###colnames(dat.plot.mean.df) <- c("majorCluster","gene","Exp")
        ###dat.plot.sd.df <- melt(dat.plot.sd.df,id.vars="majorCluster")
        ###colnames(dat.plot.sd.df) <- c("majorCluster","gene","sd")
        ###dat.plot.df  <- inner_join(dat.plot.mean.df,dat.plot.sd.df)
        pdf(sprintf("%s.barplot.pdf",out.prefix),width=pdf.width,height=nUsed*0.6+2)
        p <- ggplot(dat.plot.df, aes(majorCluster, Exp)) + 
            geom_bar(stat = "identity",color="black") +
            geom_errorbar(aes(ymax = Exp + sd, ymin = Exp),width=0.4) +
            theme_bw(base_size = 12) + 
            facet_wrap( ~ gene, ncol=ifelse(nUsed>6,2,1),switch = "y",scales = "fixed") +
            theme(axis.text.x = element_text(angle = 45, hjust = 1),strip.placement = "inside")
            ##facet_grid(gene ~ .,switch = "y",scales = "fixed") +
        print(p)
        dev.off()
    }
}


loginfo("end.")
